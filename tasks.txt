Assignments and Interfaces

William Wu
- anything and everything he wants
- general structure and backbone for the extension

Miles Dismond
- history analytics, backend development
    - graph of site access by date over time
    - graph of most visited and popular sites
        - suggestions of similar sites
    - table of most used search terms (keylogger necessary, or grab at button click?)
        - suggestions of similar search terms

Shiv Sundram
- data encryption, password protection, security
    - user creation, deleting, changing
    - database organization, localStorage vs chrome.storage.local (latter for long term safe storage)
    - access optimization, storage consideration
        - separate dictionary entries with arrays of only keys, such as tabsets, windowsets, urls as keys
        - gradually update while browsing, such that analytics will take much less time

Andrew Truong
- user interface for history.html
    - three sections/subpages, history, analytics, and settings
- analytics subpage
    - graph view, table view, chart view
- settings subpage
    - login button
    - log history only when in incognito
    - clear all history

Kevin Huynh
- user interface for popup.html
    - short list view for access to recent links
    - short list view for access to recent tabsets
    - login button changing a boolean
    - links to subpages, history, analytics, and settings
    - quick links to settings, turn off functionality, etc.

Kelvin Leong
- up to you, fill in what you want to do



Current Tasks

** remove from list and commit with details when you complete a task below **

- WE NEED TO TALK ABOUT HOW OUR DATA STRUCTURE IS GOING TO WORK BECAUSE WE HAVEN'T ESTABLISHED AN EFFECTIVE INTERFACE YET
- implement remove a link from the history data structure
- optimize memory efficiency in json storage of link data
- optimize the storage in dictionary such that storing is efficient (split on each week or month)
- figure out why the extension crashes computer, suspect it may be the keys array making access difficult
- testing module, inserting links and "autobrowsing" to test whether anything will break
- in analytics, construct a visual "search tree" that shows the user a single browsing session and animates the search pattern of the user (where clicks relate parents and children, and text searches create a soft relationship or creates a new tree)



Data Structure for Link Storage

- all items are stored as dictionary key value pairs in chrome.storage.local (though we aren't given the implementations)
    - includes actual link class objects, stringified from json format
    - includes reference arrays, sorted by date, which point to the link objects
        - consider other forms of sorting, such as by link domain (will be useful later in analytics), though this comes at memory cost
- runtimes
    - access of link at time: theta(1)
        - directly access dictionary
        - memory being loaded (when array is accessed) is going to be n / c, where c is some constant relative to number of date subarrays
            - goal here is to minimize the amount of memory being accessed
            - since we don't have chrome.storage.local.get(item, function(callback){}) implementation, we don't know if the entire dictionary is accessed when making a call
    - adding a link: theta(1)
        - hash to dictionary, then push to top of sorted array
    - removing a link: theta(1)
        - remove dictionary item, remove reference in sorted array (which may take logn time because of array shift)
- sample size
    - assume 1000 links per day, don't remember the number of bytes necessary for a character in a string
        - assume 1 byte each character
    - assume 100 characters each string, 50 characters for url, 50 characters for date and other information
    - 365 days per year, so 365 * 1000 * 100 * 1 == 36500000 == 36.5 * 10^6 == 36.5 megabytes
        - reasonable size for one year